import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/auth';
import connectDB from '@/lib/db';
import Transaction from '@/models/Transaction';
import { createChatCompletionWithFallback, FINANCIAL_ADVISOR_PROMPT } from '@/lib/openai';

export async function POST(req: NextRequest) {
  console.log('üìä AI Analyze API called');
  
  try {
    const session = await getServerSession(authOptions);
    if (!session?.user?.id) {
      console.log('‚ùå Unauthorized - no session');
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    console.log('‚úÖ Session OK, user:', session.user.email);

    await connectDB();
    console.log('‚úÖ DB connected');

    // X√°c ƒë·ªãnh period ph√¢n t√≠ch: tu·∫ßn ho·∫∑c th√°ng
    const today = new Date();
    const dayOfMonth = today.getDate();
    const isFirstDayOfMonth = dayOfMonth === 1;
    
    // N·∫øu l√† ng√†y ƒë·∫ßu th√°ng th√¨ ph√¢n t√≠ch theo th√°ng, c√≤n kh√¥ng th√¨ theo tu·∫ßn
    const analysisMode = isFirstDayOfMonth ? 'monthly' : 'weekly';
    
    let startDate: Date;
    let periodLabel: string;
    
    if (analysisMode === 'monthly') {
      // Ph√¢n t√≠ch th√°ng tr∆∞·ªõc
      startDate = new Date(today.getFullYear(), today.getMonth() - 1, 1);
      periodLabel = 'th√°ng tr∆∞·ªõc';
    } else {
      // Ph√¢n t√≠ch 7 ng√†y g·∫ßn nh·∫•t
      startDate = new Date();
      startDate.setDate(startDate.getDate() - 7);
      periodLabel = '7 ng√†y qua';
    }

    const transactions = await Transaction.find({
      userId: session.user.id,
      date: { $gte: startDate },
    })
      .sort({ date: -1 })
      .lean();

    console.log(`üìã Found ${transactions.length} transactions in ${periodLabel}`);

    if (transactions.length === 0) {
      console.log('‚ö†Ô∏è No transactions found, returning default message');
      return NextResponse.json({
        summary: `Ch∆∞a c√≥ giao d·ªãch n√†o trong ${periodLabel}. H√£y th√™m giao d·ªãch ƒë·ªÉ nh·∫≠n ƒë∆∞·ª£c insights t·ª´ AI!`,
        stats: {
          income: 0,
          expense: 0,
          balance: 0,
          savingsRate: '0.0',
        },
        topExpenseCategories: [],
        period: periodLabel,
      });
    }

    // T√≠nh to√°n th·ªëng k√™ chi ti·∫øt
    const dailyData: Record<string, { income: number; expense: number; balance: number }> = {};
    const categoryExpenses: Record<string, number> = {};
    let totalIncome = 0;
    let totalExpense = 0;

    transactions.forEach((t) => {
      const dateKey = new Date(t.date).toLocaleDateString('vi-VN');

      if (!dailyData[dateKey]) {
        dailyData[dateKey] = { income: 0, expense: 0, balance: 0 };
      }

      if (t.type === 'income') {
        dailyData[dateKey].income += t.amount;
        totalIncome += t.amount;
      } else {
        dailyData[dateKey].expense += t.amount;
        totalExpense += t.amount;
        categoryExpenses[t.category] = (categoryExpenses[t.category] || 0) + t.amount;
      }

      dailyData[dateKey].balance = dailyData[dateKey].income - dailyData[dateKey].expense;
    });

    // Ph√¢n t√≠ch ƒë·ªô ·ªïn ƒë·ªãnh thu nh·∫≠p (ch·ªâ khi c√≥ √≠t nh·∫•t 2 giao d·ªãch thu nh·∫≠p)
    const incomeTransactions = transactions.filter(t => t.type === 'income');
    let incomeStability = 0;
    let isStable = true;
    
    if (incomeTransactions.length >= 2) {
      const incomeAmounts = incomeTransactions.map(t => t.amount);
      const avgIncome = incomeAmounts.reduce((a, b) => a + b, 0) / incomeAmounts.length;
      const incomeVariance =
        incomeAmounts.reduce((sum, income) => sum + Math.pow(income - avgIncome, 2), 0) /
        incomeAmounts.length;
      const incomeStdDev = Math.sqrt(incomeVariance);
      incomeStability = avgIncome > 0 ? (incomeStdDev / avgIncome) * 100 : 0;
      isStable = incomeStability <= 20;
    }

    // Top danh m·ª•c chi ti√™u
    const topExpenseCategories = Object.entries(categoryExpenses)
      .sort(([, a], [, b]) => b - a)
      .slice(0, 5)
      .map(([category, amount]) => ({ category, amount }));

    const balance = totalIncome - totalExpense;
    const savingsRate = totalIncome > 0 ? ((balance / totalIncome) * 100).toFixed(1) : '0.0';

    // T·∫°o prompt cho AI ph√¢n t√≠ch - NG·∫ÆN G·ªåN CH·ªà 3 C√ÇU
    const analysisPrompt = `
Ph√¢n t√≠ch t√†i ch√≠nh ${periodLabel}:

üìä D·ªØ li·ªáu:
- Thu nh·∫≠p: ${totalIncome.toLocaleString('vi-VN')} VNƒê
- Chi ti√™u: ${totalExpense.toLocaleString('vi-VN')} VNƒê
- S·ªë d∆∞: ${balance.toLocaleString('vi-VN')} VNƒê
- T·ª∑ l·ªá ti·∫øt ki·ªám: ${savingsRate}%

ÔøΩ Top chi ti√™u:
${topExpenseCategories.slice(0, 3)
  .map((cat) => `- ${cat.category}: ${cat.amount.toLocaleString('vi-VN')} VNƒê`)
  .join('\n')}

H√£y ƒë∆∞a ra nh·∫≠n x√©t C·ª∞C NG·∫ÆN G·ªåN ch·ªâ trong 3 c√¢u:
1. ƒê√°nh gi√° t√¨nh h√¨nh t√†i ch√≠nh (1 c√¢u)
2. Nh·∫≠n x√©t v·ªÅ chi ti√™u n·ªïi b·∫≠t (1 c√¢u)
3. L·ªùi khuy√™n ng·∫Øn g·ªçn nh·∫•t (1 c√¢u)

Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, kh√¥ng d√πng markdown ph·ª©c t·∫°p, ch·ªâ text thu·∫ßn t√∫y c√≥ emoji.
`;

    console.log('ü§ñ Calling AI for analysis...');

    const completion = await createChatCompletionWithFallback(
      [{ role: 'user', content: analysisPrompt }],
      {
        temperature: 0.7,
        systemMessage: 'B·∫°n l√† c·ªë v·∫•n t√†i ch√≠nh. Tr·∫£ l·ªùi C·ª∞C NG·∫ÆN G·ªåN, ch·ªâ 3 c√¢u, d·ªÖ hi·ªÉu.',
      }
    );

    console.log('‚úÖ AI response received');

    const aiSummary = completion.choices[0]?.message?.content || 
      'Kh√¥ng th·ªÉ t·∫°o ph√¢n t√≠ch l√∫c n√†y.';

    console.log('üì§ Sending response to client');

    return NextResponse.json({
      summary: aiSummary,
      stats: {
        income: totalIncome,
        expense: totalExpense,
        balance,
        savingsRate,
      },
      topExpenseCategories,
      incomeStability: incomeTransactions.length >= 2 ? {
        isStable,
        variancePercent: incomeStability.toFixed(1),
      } : undefined,
      period: periodLabel,
      analysisMode,
    });
  } catch (error: any) {
    console.error('AI Analysis error:', error);

    if (error.status === 401) {
      return NextResponse.json(
        { error: 'API key kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra OPENAI_API_KEY.' },
        { status: 500 }
      );
    }

    return NextResponse.json(
      { error: error.message || 'Internal server error' },
      { status: 500 }
    );
  }
}
