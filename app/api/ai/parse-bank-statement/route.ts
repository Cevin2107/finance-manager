import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/auth';
import { openai, AI_MODEL } from '@/lib/openai';

interface ParsedTransaction {
  date: string;
  sender: string;
  bank: string;
  description: string;
  debit: number;
  credit: number;
  balance: number;
}

export async function POST(req: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const { data }: { data: any[][] } = await req.json();

    if (!data || data.length < 2) {
      return NextResponse.json({ 
        error: 'No data provided',
        details: 'File Excel kh√¥ng c√≥ ƒë·ªß d·ªØ li·ªáu (c·∫ßn √≠t nh·∫•t 2 rows)'
      }, { status: 400 });
    }

    console.log('üìä Parsing bank statement, rows:', data.length);
    console.log('First 3 rows:', data.slice(0, 3));

    // Convert data to text representation for AI
    const dataText = data
      .slice(0, 30) // Only send first 30 rows to avoid token limit
      .map((row, idx) => `Row ${idx}: ${row.map((cell, cellIdx) => `Col${cellIdx}="${cell}"`).join(', ')}`)
      .join('\n');

    console.log('üì§ Sending to AI for analysis...');

    console.log('üì§ Sending to AI for analysis...');

    const prompt = `B·∫°n l√† chuy√™n gia ph√¢n t√≠ch sao k√™ ng√¢n h√†ng. D∆∞·ªõi ƒë√¢y l√† d·ªØ li·ªáu t·ª´ file Excel sao k√™ ng√¢n h√†ng.

NHI·ªÜM V·ª§:
1. T·ª± ƒë·ªông nh·∫≠n di·ªán c√°c c·ªôt trong file (ng√†y, ng∆∞·ªùi g·ª≠i/nh·∫≠n, di·ªÖn gi·∫£i, ghi n·ª£, ghi c√≥, s·ªë d∆∞)
2. X√°c ƒë·ªãnh row n√†o l√† header, row n√†o l√† d·ªØ li·ªáu
3. Parse v√† chu·∫©n h√≥a d·ªØ li·ªáu

L∆ØU √ù:
- Ghi n·ª£ (debit) = Ti·ªÅn B·ªä TR·ª™ (chi ti√™u) - c√≥ th·ªÉ t√™n: "Ghi n·ª£", "Debit", "Ti·ªÅn ra", "S·ªë ti·ªÅn ghi n·ª£", "R√∫t", "-"
- Ghi c√≥ (credit) = Ti·ªÅn ƒê∆Ø·ª¢C C·ªòNG (thu nh·∫≠p) - c√≥ th·ªÉ t√™n: "Ghi c√≥", "Credit", "Ti·ªÅn v√†o", "S·ªë ti·ªÅn ghi c√≥", "N·∫°p", "+"
- Ng√†y c√≥ th·ªÉ ·ªü nhi·ªÅu format: dd/mm/yyyy, yyyy-mm-dd, s·ªë Excel date (VD: 45232)
- Di·ªÖn gi·∫£i/N·ªôi dung: th∆∞·ªùng ch·ª©a text m√¥ t·∫£ giao d·ªãch
- S·ªë ti·ªÅn c√≥ th·ªÉ c√≥ d·∫•u ph√¢n c√°ch (1,000,000) ho·∫∑c kh√¥ng (1000000)
- B·ªè qua c√°c row tr·ªëng ho·∫∑c row t·ªïng k·∫øt

D·ªÆ LI·ªÜU:
${dataText}

TR·∫¢ V·ªÄ JSON theo format SAU (QUAN TR·ªåNG - PH·∫¢I ƒê√öNG FORMAT):
{
  "headerRow": <s·ªë th·ª© t·ª± row l√† header, VD: 0>,
  "columnMapping": {
    "date": <s·ªë c·ªôt ch·ª©a ng√†y, VD: 0>,
    "sender": <s·ªë c·ªôt ch·ª©a ng∆∞·ªùi g·ª≠i/nh·∫≠n ho·∫∑c null>,
    "bank": <s·ªë c·ªôt ch·ª©a ng√¢n h√†ng ho·∫∑c null>,
    "description": <s·ªë c·ªôt ch·ª©a di·ªÖn gi·∫£i/n·ªôi dung, VD: 3>,
    "debit": <s·ªë c·ªôt ch·ª©a ghi n·ª£/ti·ªÅn ra, VD: 4>,
    "credit": <s·ªë c·ªôt ch·ª©a ghi c√≥/ti·ªÅn v√†o, VD: 5>,
    "balance": <s·ªë c·ªôt ch·ª©a s·ªë d∆∞ ho·∫∑c null>
  },
  "transactions": [
    {
      "date": "2025-10-20",
      "sender": "NGUYEN VAN A",
      "bank": "",
      "description": "Chuyen tien",
      "debit": 0,
      "credit": 1000000,
      "balance": 5000000
    }
  ]
}

QUY T·∫ÆC:
- date ph·∫£i format YYYY-MM-DD
- debit v√† credit l√† s·ªë (kh√¥ng c√≥ d·∫•u ph√¢n c√°ch)
- N·∫øu kh√¥ng c√≥ sender/bank/balance th√¨ ƒë·ªÉ r·ªóng ho·∫∑c 0
- CH·ªà TR·∫¢ V·ªÄ JSON H·ª¢P L·ªÜ, KH√îNG TEXT GI·∫¢I TH√çCH`;

    const completion = await openai.chat.completions.create({
      model: AI_MODEL,
      messages: [
        {
          role: 'system',
          content: 'You are an expert at parsing bank statements from various formats. Always return valid JSON only. Be extremely accurate in detecting debit (money out) vs credit (money in).',
        },
        {
          role: 'user',
          content: prompt,
        },
      ],
      temperature: 0.1, // Very low for accuracy
    });

    const responseText = completion.choices[0].message.content || '{}';
    
    console.log('üì• AI Response:', responseText.substring(0, 500));
    
    // Extract JSON from response
    let jsonText = responseText.trim();
    if (jsonText.startsWith('```')) {
      jsonText = jsonText.replace(/```json\n?/g, '').replace(/```\n?/g, '');
    }

    const result = JSON.parse(jsonText);

    console.log('‚úÖ Parsed result, transactions:', result.transactions?.length || 0);

    // Validate the result
    if (!result.transactions || result.transactions.length === 0) {
      return NextResponse.json({
        error: 'No transactions found',
        details: 'AI kh√¥ng th·ªÉ nh·∫≠n di·ªán giao d·ªãch trong file. Vui l√≤ng ki·ªÉm tra file c√≥ ƒë√∫ng l√† sao k√™ ng√¢n h√†ng kh√¥ng.',
        aiResponse: responseText.substring(0, 500)
      }, { status: 400 });
    }

    return NextResponse.json({
      success: true,
      transactions: result.transactions,
      metadata: {
        headerRow: result.headerRow,
        columnMapping: result.columnMapping,
        totalRows: result.transactions.length,
      },
    });
  } catch (error: any) {
    console.error('‚ùå Error parsing bank statement:', error);
    if (error?.stack) {
      console.error('Error stack:', error.stack);
    }

    const status = error?.status || error?.response?.status || 500;
    const apiError = error?.error || error?.response?.data || {};
    const errorMessage = apiError?.message || error?.message || 'Unknown error';
    const errorCode = apiError?.code || error?.code;

    let suggestion = 'Vui l√≤ng ki·ªÉm tra: 1) File Excel c√≥ ƒë√∫ng ƒë·ªãnh d·∫°ng sao k√™ ng√¢n h√†ng kh√¥ng, 2) File c√≥ √≠t nh·∫•t 2 rows (header + data), 3) C√°c c·ªôt c√≥ ch·ª©a th√¥ng tin ng√†y, s·ªë ti·ªÅn kh√¥ng';

    if (status === 402) {
      suggestion = 'API DeepSeek b√°o h·∫øt credit (402 Insufficient Balance). Vui l√≤ng n·∫°p th√™m credit ho·∫∑c c·∫≠p nh·∫≠t API key kh√°c.';
    } else if (status === 429) {
      suggestion = 'API ƒëang b·ªã gi·ªõi h·∫°n t·ªëc ƒë·ªô (429 Rate Limit). Vui l√≤ng ƒë·ª£i v√†i ph√∫t ho·∫∑c gi·∫£m s·ªë l·∫ßn g·ªçi.';
    }

    return NextResponse.json(
      {
        error: 'Failed to parse bank statement',
        details: errorMessage,
        suggestion,
        errorType: error?.name || 'Error',
        status,
        errorCode,
      },
      { status }
    );
  }
}
