import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/auth';
import connectDB from '@/lib/db';
import Transaction from '@/models/Transaction';
import Budget from '@/models/Budget';
import { openai, AI_MODEL, FINANCIAL_ADVISOR_PROMPT } from '@/lib/openai';

export async function POST(req: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const { message } = await req.json();

    if (!message?.trim()) {
      return NextResponse.json(
        { error: 'Message is required' },
        { status: 400 }
      );
    }

    await connectDB();

    // L·∫•y d·ªØ li·ªáu t√†i ch√≠nh 3 th√°ng g·∫ßn nh·∫•t
    const threeMonthsAgo = new Date();
    threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3);

    const transactions = await Transaction.find({
      userId: session.user.id,
      date: { $gte: threeMonthsAgo },
    })
      .sort({ date: -1 })
      .limit(100)
      .lean();

    const budgets = await Budget.find({
      userId: session.user.id,
    }).lean();

    // T·∫°o context t·ª´ d·ªØ li·ªáu t√†i ch√≠nh
    let contextMessage = '';
    
    if (transactions.length > 0) {
      // T√≠nh to√°n th·ªëng k√™
      const monthlyStats: Record<string, { income: number; expense: number }> = {};
      const expenseByCategory: Record<string, number> = {};

      transactions.forEach((t) => {
        const monthKey = new Date(t.date).toLocaleDateString('vi-VN', {
          year: 'numeric',
          month: 'long',
        });

        if (!monthlyStats[monthKey]) {
          monthlyStats[monthKey] = { income: 0, expense: 0 };
        }

        if (t.type === 'income') {
          monthlyStats[monthKey].income += t.amount;
        } else {
          monthlyStats[monthKey].expense += t.amount;
          expenseByCategory[t.category] = (expenseByCategory[t.category] || 0) + t.amount;
        }
      });

      contextMessage = `
üìä TH√îNG TIN T√ÄI CH√çNH C·ª¶A NG∆Ø·ªúI D√ôNG (3 th√°ng g·∫ßn nh·∫•t):

üìà Th·ªëng k√™ theo th√°ng:
${Object.entries(monthlyStats)
  .map(
    ([month, stats]) =>
      `${month}:
  - Thu nh·∫≠p: ${stats.income.toLocaleString('vi-VN')} VNƒê
  - Chi ti√™u: ${stats.expense.toLocaleString('vi-VN')} VNƒê
  - C√≤n l·∫°i: ${(stats.income - stats.expense).toLocaleString('vi-VN')} VNƒê`
  )
  .join('\n')}

üí∞ Chi ti√™u theo danh m·ª•c:
${Object.entries(expenseByCategory)
  .sort(([, a]: any, [, b]: any) => b - a)
  .map(([category, amount]: [string, any]) => 
    `- ${category}: ${amount.toLocaleString('vi-VN')} VNƒê`
  )
  .join('\n')}

üéØ Ng√¢n s√°ch ƒë√£ ƒë·∫∑t: ${budgets.length} danh m·ª•c

D·ª±a tr√™n d·ªØ li·ªáu tr√™n, h√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng.
`;
    }

    // G·ªçi OpenAI API
    const completion = await openai.chat.completions.create({
      model: AI_MODEL,
      messages: [
        {
          role: 'system' as const,
          content: FINANCIAL_ADVISOR_PROMPT,
        },
        ...(contextMessage
          ? [
              {
                role: 'system' as const,
                content: contextMessage,
              },
            ]
          : []),
        {
          role: 'user' as const,
          content: message,
        },
      ],
      temperature: 0.7,
      max_tokens: 1000,
    });

    const aiResponse = completion.choices[0]?.message?.content || 
      'Xin l·ªói, t√¥i kh√¥ng th·ªÉ t·∫°o ph·∫£n h·ªìi l√∫c n√†y.';

    return NextResponse.json({
      response: aiResponse,
      usage: completion.usage,
    });
  } catch (error: any) {
    console.error('AI Chat error:', error);
    
    if (error.status === 401) {
      return NextResponse.json(
        { error: 'API key kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra OPENAI_API_KEY.' },
        { status: 500 }
      );
    }

    return NextResponse.json(
      { error: error.message || 'Internal server error' },
      { status: 500 }
    );
  }
}
