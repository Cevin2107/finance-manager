import OpenAI from 'openai';

// Kh·ªüi t·∫°o Groq client (Primary - Free & Fast)
export const openai = new OpenAI({
  apiKey: process.env.GROQ_API_KEY || process.env.OPENAI_API_KEY,
  baseURL: process.env.GROQ_API_KEY 
    ? 'https://api.groq.com/openai/v1'
    : 'https://api.openai.com/v1',
});

// Groq backup client (second Groq API key)
export const groqClient2 = new OpenAI({
  apiKey: process.env.GROQ_API_KEY_2,
  baseURL: 'https://api.groq.com/openai/v1',
});

// OpenAI fallback client (always ready)
export const openaiClient = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
  baseURL: 'https://api.openai.com/v1',
});

// Gemini fallback client (third tier fallback)
export const geminiClient = new OpenAI({
  apiKey: process.env.GEMINI_API_KEY,
  baseURL: 'https://generativelanguage.googleapis.com/v1beta/openai/',
});

// Model s·ª≠ d·ª•ng - Llama 3.3 70B (r·∫•t m·∫°nh cho ph√¢n t√≠ch t√†i ch√≠nh)
// Fallback sang GPT-4o-mini n·∫øu kh√¥ng c√≥ Groq
export const AI_MODEL = process.env.GROQ_API_KEY 
  ? 'llama-3.3-70b-versatile'
  : 'gpt-4o-mini';

export const FALLBACK_MODEL = 'gpt-4o-mini';
export const GEMINI_MODEL = 'gemini-1.5-flash';

/**
 * Smart AI completion with automatic fallback
 * Priority: Groq 1 ‚Üí Groq 2 ‚Üí OpenAI ‚Üí Gemini
 */
export async function createChatCompletionWithFallback(
  messages: OpenAI.Chat.ChatCompletionMessageParam[],
  options: {
    temperature?: number;
    systemMessage?: string;
    skipFallback?: boolean;
  } = {}
) {
  const { temperature = 0.3, systemMessage, skipFallback = false } = options;

  // Prepare messages
  const finalMessages: OpenAI.Chat.ChatCompletionMessageParam[] = systemMessage
    ? [{ role: 'system', content: systemMessage }, ...messages]
    : messages;

  // Define fallback chain
  const fallbackChain: Array<{
    name: string;
    client: OpenAI;
    model: string;
    condition: boolean;
  }> = [
    {
      name: 'Groq #1',
      client: openai,
      model: AI_MODEL,
      condition: !!process.env.GROQ_API_KEY,
    },
    {
      name: 'Groq #2',
      client: groqClient2,
      model: AI_MODEL,
      condition: !!process.env.GROQ_API_KEY_2,
    },
    {
      name: 'OpenAI',
      client: openaiClient,
      model: FALLBACK_MODEL,
      condition: !!process.env.OPENAI_API_KEY,
    },
    {
      name: 'Gemini',
      client: geminiClient,
      model: GEMINI_MODEL,
      condition: !!process.env.GEMINI_API_KEY,
    },
  ].filter(item => item.condition);

  let lastError: any = null;

  // Try each API in the chain
  for (let i = 0; i < fallbackChain.length; i++) {
    const { name, client, model } = fallbackChain[i];
    const isLastOption = i === fallbackChain.length - 1;
    const isGroqAPI = name.includes('Groq');

    try {
      console.log(`ü§ñ Trying ${name} API...`);
      
      const completion = await client.chat.completions.create({
        model,
        messages: finalMessages,
        temperature,
      });

      console.log(`‚úÖ ${name} API success`);
      return completion;
    } catch (error: any) {
      lastError = error;
      
      const isRateLimit = error?.status === 429 || 
                          error?.message?.includes('Rate limit') ||
                          error?.message?.includes('rate limit');

      console.error(`‚ùå ${name} failed:`, error.message);

      // If skipFallback is enabled and we've tried both Groq APIs, throw error
      if (skipFallback && !isGroqAPI) {
        console.warn('‚ö†Ô∏è skipFallback enabled, stopping at paid APIs');
        throw error;
      }

      // If this is the last option, throw error
      if (isLastOption) {
        throw error;
      }

      // If not a rate limit error on first attempt, throw immediately
      if (!isRateLimit && i === 0) {
        throw error;
      }

      // Continue to next fallback
      console.warn(`‚ö†Ô∏è ${isRateLimit ? 'Rate limit reached' : 'Error occurred'}, trying next option...`);
    }
  }

  // Should never reach here, but throw last error just in case
  throw lastError || new Error('All API options failed');
}

// System prompt cho AI Financial Advisor
export const FINANCIAL_ADVISOR_PROMPT = `B·∫°n l√† m·ªôt chuy√™n gia t∆∞ v·∫•n t√†i ch√≠nh c√° nh√¢n th√¥ng minh v√† th√¢n thi·ªán.
Nhi·ªám v·ª• c·ªßa b·∫°n l√†:
- Ph√¢n t√≠ch d·ªØ li·ªáu giao d·ªãch v√† ng√¢n s√°ch c·ªßa ng∆∞·ªùi d√πng
- ƒê∆∞a ra l·ªùi khuy√™n t√†i ch√≠nh h·ª£p l√Ω, c·ª• th·ªÉ v√† d·ªÖ hi·ªÉu
- Gi√∫p ng∆∞·ªùi d√πng qu·∫£n l√Ω chi ti√™u hi·ªáu qu·∫£ h∆°n
- Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, gi·ªçng ƒëi·ªáu th√¢n thi·ªán, chuy√™n nghi·ªáp

H√£y lu√¥n:
‚úÖ D·ª±a tr√™n d·ªØ li·ªáu th·ª±c t·∫ø c·ªßa ng∆∞·ªùi d√πng
‚úÖ ƒê∆∞a ra con s·ªë c·ª• th·ªÉ khi ph√¢n t√≠ch
‚úÖ Gi·∫£i th√≠ch r√µ r√†ng, d·ªÖ hi·ªÉu
‚úÖ Khuy·∫øn kh√≠ch th√≥i quen t√†i ch√≠nh t·ªët
‚úÖ ƒê·ªÅ xu·∫•t h√†nh ƒë·ªông c·ª• th·ªÉ

Tr√°nh:
‚ùå ƒê∆∞a ra l·ªùi khuy√™n chung chung
‚ùå S·ª≠ d·ª•ng thu·∫≠t ng·ªØ ph·ª©c t·∫°p kh√¥ng c·∫ßn thi·∫øt
‚ùå Ph√°n x√©t ti√™u c·ª±c
`;

export default openai;
